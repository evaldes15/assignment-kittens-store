name: GitHub Actions Demo
on: [push]
jobs:
  test-application:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: runner
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5        
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.4.9'
      - name: Install dependencies
        run: bundle install
      - name: Init database
        run: | 
          bundle exec rake db:create
          bundle exec rake db:migrate
          bundle exec rake db:seed
        env:
          DATABASE_URL: postgres://test:runner@localhost:5432/postgres
          RACK_ENV: test
      - name: Run tests
        run: bundle exec rspec
        env:
          DATABASE_URL: postgres://test:runner@localhost:5432/postgres
          RACK_ENV: test
  build-push-application:
    needs: test-application
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kittens_store
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Install and configure kubectl
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
            --progress-bar \
            --location \
            --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml

      - name: Install and configure helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https --yes
          echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm

      - name: Deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          export ECR_IMG=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          export KUBECONFIG=kubeconfig.yaml
          helm install kittens_store-chart ./k8s/kittens_store/ --set deployment.db.password=${{ secrets.DB_PWD }} --set deployment.app.id=${{ github.sha  }} --set deployment.app.url=${{ secrets.DB_URL }} --set deployment.app.image=${ECR_IMG}